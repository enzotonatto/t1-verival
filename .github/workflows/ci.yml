name: CI
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "11"
          cache: maven

      - name: Run tests
        run: mvn -B test
      - name: Generate JaCoCo report
        run: mvn -B jacoco:report

      - name: Collect test counts
        id: testcounts
        run: |
          python - <<'PY'
          import os, glob
          import xml.etree.ElementTree as ET
          dirs = ['target/surefire-reports', 'target/failsafe-reports']
          tests = failures = errors = skipped = 0
          for d in dirs:
            if os.path.isdir(d):
              for f in glob.glob(os.path.join(d, 'TEST-*.xml')):
                try:
                  root = ET.parse(f).getroot()
                  if root.tag == 'testsuite':
                    tests += int(root.attrib.get('tests', 0))
                    failures += int(root.attrib.get('failures', 0))
                    errors += int(root.attrib.get('errors', 0))
                    skipped += int(root.attrib.get('skipped', 0))
                  elif root.tag == 'testsuites':
                    for ts in root.findall('testsuite'):
                      tests += int(ts.attrib.get('tests', 0))
                      failures += int(ts.attrib.get('failures', 0))
                      errors += int(ts.attrib.get('errors', 0))
                      skipped += int(ts.attrib.get('skipped', 0))
                except Exception:
                  pass
          executed = tests - skipped
          passed = tests - failures - errors - skipped
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
            f.write(f"executed={executed}\n")
            f.write(f"passed={passed}\n")
          PY

      - name: Generate Tests Badge
        uses: emibcn/badge-action@v1
        with:
          label: 'Tests'
          status: '${{ steps.testcounts.outputs.passed }} passed / ${{ steps.testcounts.outputs.executed }} run'
          path: '.github/badges/tests.svg'
          color: 'blue'

      - name: Generate JaCoCo Badges
        uses: cicirello/jacoco-badge-generator@v2
        with:
          generate-branches-badge: true
          jacoco-csv-file: target/site/jacoco/jacoco.csv

      - name: Commit badges to repo
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .github/badges/*
          git commit -m "Update badges [skip ci]" || echo "No changes to commit"
          git pull --rebase origin main || true
          git push origin HEAD:main

      - name: Upload JaCoCo HTML report
        uses: actions/upload-artifact@v4
        with:
          name: jacoco-report
          path: target/site/jacoco